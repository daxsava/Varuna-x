<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Varuna X - Coastal Threat Alert System</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css"
   xintegrity="sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A=="
   crossorigin=""/>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        body {
            font-family: 'Inter', sans-serif;
            margin: 0;
            padding: 0;
        }
        .animate-fade-in {
            animation: fadeIn 0.5s ease-in-out;
        }
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        .active-nav-item {
            color: #0077B6;
        }
        /* Leaflet popup customization */
        .leaflet-popup-content-wrapper {
            border-radius: 8px;
        }
        .leaflet-popup-content {
            font-family: 'Inter', sans-serif;
            margin: 10px !important;
        }
        .leaflet-popup-close-button {
            padding: 8px 8px 0 0 !important;
        }
    </style>
</head>
<body class="bg-[#E5E5E5]">
    <div id="root"></div>

    <!-- Leaflet JS -->
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"
   xintegrity="sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA=="
   crossorigin=""></script>
    
    <!-- React and Babel for JSX transpilation -->
    <script src="https://unpkg.com/react@17/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>

    <script type="text/babel">
        const { useState, useEffect, useRef } = React;

        // --- ICONS ---
        // Using inline SVG for icons to avoid external library dependencies
        const StormIcon = () => (
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="lucide lucide-cloud-lightning">
                <path d="M6 16.32A7.5 7.5 0 0 1 12 8a8.5 8.5 0 0 1 8 5.17" />
                <path d="M20 8A4 4 0 0 0 16 4h-2.18a3 3 0 0 0-5.46-1.12A4 4 0 0 0 2 8" />
                <path d="m11 20-3-5h4l-3-5h4l-3-5" />
            </svg>
        );

        const TideIcon = () => (
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="lucide lucude-waves">
                <path d="M2 13a4 4 0 0 1 4-4 4 4 0 0 1 4 4a4 4 0 0 0 4 4 4 4 0 0 0 4-4 4 4 0 0 1 4-4" />
                <path d="M2 20a4 4 0 0 1 4-4 4 4 0 0 1 4 4a4 4 0 0 0 4 4 4 4 0 0 0 4-4 4 4 0 0 1 4-4" />
            </svg>
        );

        const PollutionIcon = () => (
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="lucide lucide-droplet">
                <path d="M12 2.69l5.66 5.66a8 8 0 1 1-11.31 0z" />
            </svg>
        );

        const HomeIcon = () => (
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="lucide lucide-home">
                <path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z" />
                <polyline points="9 22 9 12 15 12 15 22" />
            </svg>
        );

        const AlertsIcon = () => (
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="lucide lucide-bell-ring">
                <path d="M18 8a6 6 0 0 0-6-6v.05A3.48 3.48 0 0 1 15 9a3.48 3.48 0 0 1-3 3.95V14" />
                <path d="M22 10c0 1.66-3.6 5-10 5s-10-3.34-10-5" />
                <path d="M12 14v4a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-4" />
                <path d="M12 14v4a2 2 0 0 0 2 2h1a2 2 0 0 0 2-2v-4" />
            </svg>
        );

        const MapIcon = () => (
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="lucide lucide-map-pin">
                <path d="M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7z" />
                <circle cx="12" cy="9" r="3" />
            </svg>
        );

        const ReportIcon = () => (
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="lucide lucide-file-plus-2">
                <path d="M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v10" />
                <path d="M14 2v6h6" />
                <path d="M4 16h6" />
                <path d="M7 13v6" />
            </svg>
        );

        const SettingsIcon = () => (
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="lucide lucide-settings">
                <path d="M12.22 2h-.44a2 2 0 0 0-2 2v2a2 2 0 0 1-2 2H4a2 2 0 0 0-2 2v.44a2 2 0 0 0 2 2h2a2 2 0 0 1 2 2v2a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-2a2 2 0 0 1 2-2h2a2 2 0 0 0 2-2v-.44a2 2 0 0 0-2-2h-2a2 2 0 0 1-2-2V4a2 2 0 0 0-2-2z" />
                <circle cx="12" cy="12" r="3" />
            </svg>
        );

        const MyLocationIcon = () => (
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="lucide lucide-crosshair">
                <circle cx="12" cy="12" r="10" />
                <line x1="22" y1="12" x2="18" y2="12" />
                <line x1="6" y1="12" x2="2" y2="12" />
                <line x1="12" y1="6" x2="12" y2="2" />
                <line x1="12" y1="22" x2="12" y2="18" />
            </svg>
        );

        // --- MOCK DATA ---
        const mockMetrics = [
            { title: 'Tide Levels', value: '1.2m', trend: '+0.1m in 24h', icon: <TideIcon />, color: '#0077B6' },
            { title: 'Algal Blooms', value: 'Low', trend: 'No change', icon: <PollutionIcon />, color: '#00B894' },
            { title: 'Water Quality', value: '8/10', trend: 'Improving', icon: <PollutionIcon />, color: '#00B894' },
            { title: 'Cyclonic Activity', value: 'Alert', trend: 'Category 1', icon: <StormIcon />, color: '#FF4B4B' },
        ];

        const mockAlerts = [
             { id: 0, title: 'Monsoon High Tide Warning', time: 'Just now', level: 'Severe', description: 'Heavy monsoon rains coinciding with high tide are expected to cause coastal flooding in the next 6 hours.', whatToDo: 'Authorities in Surat are advising residents in low-lying areas like Dumas Beach and Piplod to move to higher ground. Secure your property and avoid coastal roads.', location: 'Surat, Gujarat', coords: { lat: 21.1702, lng: 72.8311 } },
            { id: 1, title: 'High Tide Alert', time: '5 mins ago', level: 'Severe', description: 'Tide levels are projected to exceed normal range, affecting low-lying coastal areas.', whatToDo: 'Evacuate low-lying areas, secure boats, and monitor official channels for updates.', location: 'Coastal Area A', coords: { lat: 21.1, lng: 72.75 } },
            { id: 2, title: 'Illegal Dumping Detected', time: '23 mins ago', level: 'Moderate', description: 'Satellite imagery analysis indicates potential illegal dumping activity near a local estuary.', whatToDo: 'Dispatch a patrol team to the coordinates for verification.', location: 'Estuary B', coords: { lat: 21.2, lng: 72.9 } },
            { id: 3, title: 'Water Pollution Anomaly', time: '1 hr ago', level: 'Low', description: 'Sensor data shows a minor spike in chemical pollutants near the coast.', whatToDo: 'Deploy water sampling drones and test for abnormal contaminant levels.', location: 'Beach C', coords: { lat: 21.05, lng: 72.7 } },
            { id: 4, title: 'Storm Surge Warning', time: '2 hrs ago', level: 'Severe', description: 'A storm surge is expected to hit the coast in the next 12 hours.', whatToDo: 'Secure property, and move to higher ground immediately.', location: 'Coastal Area D', coords: { lat: 21.15, lng: 72.8 } },
            { id: 5, title: 'Cyanobacteria Bloom', time: '4 hrs ago', level: 'Moderate', description: 'A large cyanobacteria bloom has been detected in the bay area.', whatToDo: 'Avoid contact with water and do not consume shellfish from the affected area.', location: 'Bay E', coords: { lat: 21.25, lng: 72.85 } },
        ];

        // --- REUSABLE COMPONENTS ---
        const Button = ({ children, onClick, variant = 'primary', className = '' }) => {
            let styles = 'bg-[#0077B6] text-white'; // Primary button
            if (variant === 'secondary') {
                styles = 'bg-gray-200 text-gray-800';
            } else if (variant === 'alert') {
                styles = 'bg-[#FF4B4B] text-white';
            }
            return (
                <button onClick={onClick} className={`px-4 py-2 rounded-full font-semibold transition-colors ${styles} ${className}`}>
                    {children}
                </button>
            );
        };

        const Card = ({ children, className = '', ...props }) => (
            <div className={`bg-white p-6 rounded-2xl shadow-sm ${className}`} {...props}>
                {children}
            </div>
        );

        const PageContainer = ({ children }) => (
            <main className="p-4 pt-8 pb-20 overflow-y-auto w-full h-full flex flex-col">
                {children}
            </main>
        );

        // --- SCREENS ---
        const LoginScreen = ({ onLogin }) => {
            const [isLogin, setIsLogin] = useState(true);

            const handleToggle = () => {
                setIsLogin(!isLogin);
            };

            const handleFormSubmit = (e) => {
                e.preventDefault();
                // In a real app, this is where you'd handle authentication logic
                onLogin();
            };

            return (
                <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100 text-gray-900 font-sans p-6">
                    <div className="text-center mb-10">
                        <h1 className="text-3xl font-bold mb-2">Varuna X</h1>
                        <p className="text-sm text-gray-600">Coastal Threat Alert System</p>
                    </div>
                    <Card className="w-full max-w-sm p-8">
                        <form onSubmit={handleFormSubmit} className="space-y-6">
                            <h2 className="text-xl font-bold text-center">{isLogin ? 'Sign In' : 'Sign Up'}</h2>
                            <input type="email" placeholder="Email" required className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#0077B6]" />
                            <input type="password" placeholder="Password" required className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#0077B6]" />
                            {!isLogin && (
                                <input type="password" placeholder="Confirm Password" required className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#0077B6]" />
                            )}
                            <Button type="submit" className="w-full">
                                {isLogin ? 'Sign In' : 'Sign Up'}
                            </Button>
                            <p className="text-center text-sm text-gray-600">
                                {isLogin ? "Don't have an account?" : "Already have an account?"}
                                <span onClick={handleToggle} className="text-[#0077B6] font-semibold ml-1 cursor-pointer">
                                    {isLogin ? 'Sign Up' : 'Sign In'}
                                </span>
                            </p>
                        </form>
                    </Card>
                </div>
            );
        };

        const HomeScreen = ({ onAlertClick }) => (
            <PageContainer>
                <div className="flex items-center justify-between mb-6">
                    <h1 className="text-2xl font-bold">Dashboard</h1>
                    <p className="text-sm text-[#00B894] font-semibold flex items-center">
                        <span className="relative flex h-2 w-2 mr-2">
                            <span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-[#00B894] opacity-75"></span>
                            <span className="relative inline-flex rounded-full h-2 w-2 bg-[#00B894]"></span>
                        </span>
                        Operational
                    </p>
                </div>
                <div className="mb-8">
                    <h2 className="text-lg font-bold mb-4">Current Status</h2>
                    <div className="grid grid-cols-2 gap-4">
                        {mockMetrics.map((metric, index) => (
                            <Card key={index} className="flex flex-col items-start gap-2">
                                <span style={{ color: metric.color }}>{metric.icon}</span>
                                <p className="text-sm text-gray-600">{metric.title}</p>
                                <p className="text-xl font-bold text-gray-900">{metric.value}</p>
                                <p className="text-xs text-gray-500">{metric.trend}</p>
                            </Card>
                        ))}
                    </div>
                </div>
                <div className="mb-8">
                    <h2 className="text-lg font-bold mb-4">Active Alerts</h2>
                    <div className="space-y-3">
                        {mockAlerts.slice(0, 3).map((alert) => (
                            <Card key={alert.id} className="cursor-pointer border-l-4" style={{ borderColor: alert.level === 'Severe' ? '#FF4B4B' : alert.level === 'Moderate' ? '#F6AD55' : '#4299E1' }} onClick={() => onAlertClick(alert)}>
                                <div className="flex justify-between items-center mb-1">
                                    <p className="font-semibold text-gray-900">{alert.title}</p>
                                    <span className={`text-xs font-medium px-2 py-1 rounded-full ${alert.level === 'Severe' ? 'bg-red-500 text-white' : alert.level === 'Moderate' ? 'bg-yellow-500 text-white' : 'bg-blue-500 text-white'}`}>
                                        {alert.level}
                                    </span>
                                </div>
                                <p className="text-xs text-gray-500 truncate">{alert.description}</p>
                            </Card>
                        ))}
                    </div>
                </div>
            </PageContainer>
        );

        const AlertsScreen = ({ onAlertClick }) => (
            <PageContainer>
                <div className="flex items-center mb-6">
                    <h1 className="text-2xl font-bold">All Alerts</h1>
                </div>
                <div className="space-y-3">
                    {mockAlerts.map((alert) => (
                        <Card key={alert.id} className="cursor-pointer border-l-4" style={{ borderColor: alert.level === 'Severe' ? '#FF4B4B' : alert.level === 'Moderate' ? '#F6AD55' : '#4299E1' }} onClick={() => onAlertClick(alert)}>
                            <div className="flex justify-between items-center mb-1">
                                <p className="font-semibold text-gray-900">{alert.title}</p>
                                <span className={`text-xs font-medium px-2 py-1 rounded-full ${alert.level === 'Severe' ? 'bg-red-500 text-white' : alert.level === 'Moderate' ? 'bg-yellow-500 text-white' : 'bg-blue-500 text-white'}`}>
                                    {alert.level}
                                </span>
                            </div>
                            <p className="text-xs text-gray-500">{alert.description}</p>
                            <span className="text-xs text-gray-400 mt-2 block">Location: {alert.location}</span>
                        </Card>
                    ))}
                </div>
            </PageContainer>
        );

        const AlertDetailsScreen = ({ alert, onBack }) => (
            <PageContainer>
                <div className="flex items-center mb-6">
                    <button onClick={onBack} className="text-gray-600 mr-2 p-2 rounded-full hover:bg-gray-200">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m15 18-6-6 6-6" /></svg>
                    </button>
                    <h1 className="text-2xl font-bold">Alert Details</h1>
                </div>
                <Card className="mb-4">
                    <h2 className="text-xl font-bold mb-2" style={{ color: alert.level === 'Severe' ? '#FF4B4B' : alert.level === 'Moderate' ? '#F6AD55' : '#4299E1' }}>{alert.title}</h2>
                    <p className="text-sm text-gray-600 mb-2">{alert.time}</p>
                    <p className="text-sm text-gray-800 font-semibold mb-1">Location:</p>
                    <p className="text-sm text-gray-600 mb-4">{alert.location}</p>
                    <p className="text-sm text-gray-800 font-semibold mb-1">Description:</p>
                    <p className="text-sm text-gray-600 mb-4">{alert.description}</p>
                    <p className="text-sm text-gray-800 font-semibold mb-1">What to do:</p>
                    <p className="text-sm text-gray-600">{alert.whatToDo}</p>
                    <Button variant="alert" className="w-full mt-6">Acknowledge</Button>
                </Card>
            </PageContainer>
        );

        const MapScreen = ({ alerts, onBack }) => {
            const mapRef = useRef(null);
            const mapInstance = useRef(null);
            const userMarker = useRef(null);
            const [locationStatus, setLocationStatus] = useState('Locating your position...');

            const locateUser = () => {
                if (mapInstance.current) {
                    setLocationStatus('Locating your position...');
                    mapInstance.current.locate({ setView: true, maxZoom: 14 });
                }
            };

            useEffect(() => {
                if (mapRef.current && !mapInstance.current) {
                    mapInstance.current = L.map(mapRef.current).setView([21.1702, 72.8311], 11);

                    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
                    }).addTo(mapInstance.current);

                    mapInstance.current.on('locationfound', (e) => {
                        setLocationStatus(null);
                        const userIcon = L.divIcon({
                            html: `<div class="w-4 h-4 bg-blue-500 rounded-full border-2 border-white shadow-md animate-pulse"></div>`,
                            className: 'bg-transparent border-0',
                            iconSize: [16, 16],
                        });

                        if (userMarker.current) {
                            userMarker.current.setLatLng(e.latlng);
                        } else {
                            userMarker.current = L.marker(e.latlng, { icon: userIcon }).addTo(mapInstance.current)
                                .bindPopup("You are here").openPopup();
                        }
                    });

                    mapInstance.current.on('locationerror', (e) => {
                        setLocationStatus('Location access denied. Showing Surat area.');
                    });

                    const getIcon = (level) => {
                        const color = level === 'Severe' ? '#FF4B4B' : level === 'Moderate' ? '#F6AD55' : '#4299E1';
                        return L.divIcon({
                            html: `<span style="background-color: ${color};" class="w-4 h-4 block rounded-full border-2 border-white shadow"></span>`,
                            className: 'bg-transparent border-0',
                            iconSize: [16, 16],
                            iconAnchor: [8, 8]
                        });
                    };

                    alerts.forEach(alert => {
                        const marker = L.marker([alert.coords.lat, alert.coords.lng], { icon: getIcon(alert.level) }).addTo(mapInstance.current);
                        const popupContent = `
                            <div class="font-sans">
                                <h3 class="font-bold text-md mb-1">${alert.title}</h3>
                                <p class="text-sm text-gray-600">${alert.location}</p>
                            </div>
                        `;
                        marker.bindPopup(popupContent);
                    });
                    
                    locateUser();
                }

                return () => {
                    if (mapInstance.current) {
                        mapInstance.current.remove();
                        mapInstance.current = null;
                    }
                };
            }, []);

            return (
                <PageContainer>
                     <div className="flex items-center mb-6">
                        <button onClick={onBack} className="text-gray-600 mr-2 p-2 rounded-full hover:bg-gray-200">
                           <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m15 18-6-6 6-6" /></svg>
                        </button>
                        <h1 className="text-2xl font-bold">Threat Map</h1>
                    </div>
                    <Card className="flex items-center justify-center h-full flex-1 p-0 overflow-hidden relative">
                        {locationStatus && (
                            <div className="absolute top-2 left-1/2 -translate-x-1/2 bg-white/80 backdrop-blur-sm text-gray-700 text-xs font-medium px-3 py-1.5 rounded-full z-[1000] shadow">
                                {locationStatus}
                            </div>
                        )}
                        <div ref={mapRef} className="w-full h-full rounded-2xl"></div>
                        <button onClick={locateUser} className="absolute bottom-4 right-4 bg-white p-3 rounded-full shadow-lg text-gray-600 z-[1000] hover:bg-gray-100 transition-colors">
                            <MyLocationIcon />
                        </button>
                    </Card>
                </PageContainer>
            );
        };

        const ReportScreen = ({ onBack }) => (
            <PageContainer>
                <div className="flex items-center mb-6">
                     <button onClick={onBack} className="text-gray-600 mr-2 p-2 rounded-full hover:bg-gray-200">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m15 18-6-6 6-6" /></svg>
                    </button>
                    <h1 className="text-2xl font-bold">Report a Threat</h1>
                </div>
                <Card className="w-full space-y-4">
                    <h2 className="text-xl font-bold">Report Oil Spill / Illegal Dumping</h2>
                    <select className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#0077B6]">
                        <option>Oil Spill</option>
                        <option>Illegal Dumping</option>
                        <option>Other</option>
                    </select>
                    <textarea placeholder="Describe the threat..." rows="4" className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#0077B6]"></textarea>
                    <Button variant="primary" className="w-full">Submit Report</Button>
                </Card>
            </PageContainer>
        );

        const SettingsScreen = ({ onBack }) => {
            const [smsEnabled, setSmsEnabled] = useState(true);
            const [pushEnabled, setPushEnabled] = useState(true);
            return (
                <PageContainer>
                    <div className="flex items-center mb-6">
                        <button onClick={onBack} className="text-gray-600 mr-2 p-2 rounded-full hover:bg-gray-200">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m15 18-6-6 6-6" /></svg>
                        </button>
                        <h1 className="text-2xl font-bold">Settings</h1>
                    </div>
                    <Card className="space-y-4">
                        <h2 className="text-lg font-bold">Alert Preferences</h2>
                        <div className="flex items-center justify-between">
                            <p className="text-gray-800">SMS Alerts</p>
                            <div onClick={() => setSmsEnabled(!smsEnabled)} className={`relative inline-flex items-center h-6 w-11 rounded-full cursor-pointer transition-colors ${smsEnabled ? 'bg-[#0077B6]' : 'bg-gray-200'}`}>
                                <span className={`inline-block w-4 h-4 transform transition-transform rounded-full bg-white ${smsEnabled ? 'translate-x-6' : 'translate-x-1'}`}></span>
                            </div>
                        </div>
                        <div className="flex items-center justify-between">
                            <p className="text-gray-800">Push Notifications</p>
                            <div onClick={() => setPushEnabled(!pushEnabled)} className={`relative inline-flex items-center h-6 w-11 rounded-full cursor-pointer transition-colors ${pushEnabled ? 'bg-[#0077B6]' : 'bg-gray-200'}`}>
                                <span className={`inline-block w-4 h-4 transform transition-transform rounded-full bg-white ${pushEnabled ? 'translate-x-6' : 'translate-x-1'}`}></span>
                            </div>
                        </div>
                    </Card>
                </PageContainer>
            );
        };
        
        // --- MAIN APP COMPONENT ---
        const App = () => {
            const [currentPage, setCurrentPage] = useState('login');
            const [selectedAlert, setSelectedAlert] = useState(null);

            const handleLogin = () => {
                setCurrentPage('home');
            };

            const handleAlertClick = (alert) => {
                setSelectedAlert(alert);
                setCurrentPage('alertDetails');
            };

            const renderContent = () => {
                switch (currentPage) {
                    case 'login':
                        return <LoginScreen onLogin={handleLogin} />;
                    case 'home':
                        return <HomeScreen onAlertClick={handleAlertClick} />;
                    case 'alerts':
                        return <AlertsScreen onAlertClick={handleAlertClick} />;
                    case 'alertDetails':
                        return <AlertDetailsScreen alert={selectedAlert} onBack={() => setCurrentPage('alerts')} />;
                    case 'map':
                        return <MapScreen alerts={mockAlerts} onBack={() => setCurrentPage('home')} />;
                    case 'report':
                        return <ReportScreen onBack={() => setCurrentPage('home')} />;
                    case 'settings':
                        return <SettingsScreen onBack={() => setCurrentPage('home')} />;
                    default:
                        return <HomeScreen onAlertClick={handleAlertClick} />;
                }
            };
            
            const isLoggedIn = currentPage !== 'login';

            return (
                <div className="text-gray-900 min-h-screen font-sans antialiased flex flex-col items-center">
                    <div className="w-full max-w-md h-screen flex flex-col shadow-xl bg-gray-100 overflow-hidden">
                        <div className="flex-1 overflow-y-auto">
                            {renderContent()}
                        </div>

                        {isLoggedIn && (
                            <nav className="fixed bottom-0 left-0 right-0 max-w-md mx-auto bg-white border-t border-gray-200 shadow-lg z-50 rounded-t-2xl">
                                <ul className="flex justify-around py-3 px-2">
                                    <li className="flex-1">
                                        <button onClick={() => setCurrentPage('home')} className={`flex flex-col items-center w-full text-xs font-medium transition-colors ${currentPage === 'home' ? 'text-[#0077B6]' : 'text-gray-500 hover:text-[#0077B6]'}`}>
                                            <HomeIcon className="mb-1" />
                                            <span>Home</span>
                                        </button>
                                    </li>
                                    <li className="flex-1">
                                        <button onClick={() => setCurrentPage('map')} className={`flex flex-col items-center w-full text-xs font-medium transition-colors ${currentPage === 'map' ? 'text-[#0077B6]' : 'text-gray-500 hover:text-[#0077B6]'}`}>
                                            <MapIcon className="mb-1" />
                                            <span>Map</span>
                                        </button>
                                    </li>
                                    <li className="flex-1">
                                        <button onClick={() => setCurrentPage('report')} className={`flex flex-col items-center w-full text-xs font-medium transition-colors text-gray-500 hover:text-[#0077B6]'}`}>
                                            <div className="bg-[#0077B6] p-3 rounded-full text-white -mt-8 shadow-lg border-4 border-white">
                                                <ReportIcon />
                                            </div>
                                            <span className="mt-1">Report</span>
                                        </button>
                                    </li>
                                    <li className="flex-1">
                                        <button onClick={() => setCurrentPage('alerts')} className={`flex flex-col items-center w-full text-xs font-medium transition-colors ${currentPage === 'alerts' || currentPage === 'alertDetails' ? 'text-[#0077B6]' : 'text-gray-500 hover:text-[#0077B6]'}`}>
                                            <AlertsIcon className="mb-1" />
                                            <span>Alerts</span>
                                        </button>
                                    </li>
                                    <li className="flex-1">
                                        <button onClick={() => setCurrentPage('settings')} className={`flex flex-col items-center w-full text-xs font-medium transition-colors ${currentPage === 'settings' ? 'text-[#0077B6]' : 'text-gray-500 hover:text-[#0077B6]'}`}>
                                            <SettingsIcon className="mb-1" />
                                            <span>Settings</span>
                                        </button>
                                    </li>
                                </ul>
                            </nav>
                        )}
                    </div>
                </div>
            );
        };

        ReactDOM.render(<App />, document.getElementById('root'));

    </script>
</body>
</html>
